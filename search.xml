<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>[BUAA Computer Network Experiment] Notes</title>
      <link href="/2024/06/12/BUAA-Computer-Network-Experiment-Note/"/>
      <url>/2024/06/12/BUAA-Computer-Network-Experiment-Note/</url>
      
        <content type="html"><![CDATA[<h4 id="实验一-网络实验入门"><a href="#实验一-网络实验入门" class="headerlink" title="实验一 网络实验入门"></a>实验一 网络实验入门</h4><h5 id="交换机和路由器简介"><a href="#交换机和路由器简介" class="headerlink" title="交换机和路由器简介"></a>交换机和路由器简介</h5><ul><li><p>交换机工作在数据链路层，基本功能是在多个计算机或者网段之间交换数据。</p></li><li><p>路由器工作在网络层，基本功能是根据数据包的IP地址选择发送路径，转发数据包到相应网络。</p></li></ul><h5 id="交换机和路由器的基本配置"><a href="#交换机和路由器的基本配置" class="headerlink" title="交换机和路由器的基本配置"></a>交换机和路由器的基本配置</h5><h5 id="地址转换NAT"><a href="#地址转换NAT" class="headerlink" title="地址转换NAT"></a>地址转换NAT</h5><p>配置地址转换，把所有内网地址转换成所配置的地址池中的地址</p><ul><li><p>定义访问控制列表，允许IP源地址为10.0.0.0/24的外出数据包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[R1] acl number 2001</span><br><span class="line">[R1-acl-2001] rule permit source 10.0.0.0 0.0.0.255</span><br><span class="line">[R1-acl-2001] rule deny source any</span><br></pre></td></tr></table></figure></li><li><p>定义一个包含5个公网地址的地址池，地址池名称为1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#v5</span><br><span class="line">[R1] nat address-group 1 192.168.5.105 192.168.5.109</span><br><span class="line">#v7</span><br><span class="line">[R1] nat address-group 1</span><br><span class="line">[R1-address-group-1] address 192.168.5.105 192.168.5.109</span><br></pre></td></tr></table></figure></li><li><p>将访问控制运用到地址池</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[R1] interface e0&#x2F;1</span><br><span class="line">[R1-Ethernet0&#x2F;1] nat outbound 2001 address-group 1</span><br></pre></td></tr></table></figure></li><li><p>在路由表中添加默认路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[R1] ip route-static 0.0.0.0 0.0.0.0 192.168.5.1</span><br></pre></td></tr></table></figure></li><li><p>与OSPF结合，还需引入默认路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[R1-ospf-1] default-route-advertise (cost 100)</span><br></pre></td></tr></table></figure></li></ul><h4 id="实验二-数据链路层实验"><a href="#实验二-数据链路层实验" class="headerlink" title="实验二 数据链路层实验"></a>实验二 数据链路层实验</h4><h5 id="以太网链路层帧格式分析"><a href="#以太网链路层帧格式分析" class="headerlink" title="以太网链路层帧格式分析"></a>以太网链路层帧格式分析</h5><h5 id="交换机的MAC地址表和端口聚合"><a href="#交换机的MAC地址表和端口聚合" class="headerlink" title="交换机的MAC地址表和端口聚合"></a>交换机的MAC地址表和端口聚合</h5><p>区分路由聚合，端口聚合是将交换机的多个物理端口在逻辑上进行绑定，形成一个具有较高带宽的通道。</p><p><img src="计网实验复习笔记.asset/image-20240519193708182.png" alt="image-20240519193708182" style="zoom:80%;" /></p><h5 id="VLAN的配置与分析"><a href="#VLAN的配置与分析" class="headerlink" title="VLAN的配置与分析"></a>VLAN的配置与分析</h5><p><strong><em>VLAN的产生</em></strong></p><p>为了减少在广播域中转发的报文，将大的广播域隔离成多个较小的广播域，于是出现了VLAN技术。在VLAN技术中，规定凡是具有VLAN功能的<strong>交换机</strong>在转发数据报文时，都需要确认该报文属于某一个VLAN，并且该报文只能被转发到属于同一VLAN的端口或主机，<strong>每个VLAN代表了一个广播域</strong>。（Virtual Local Area Network，虚拟局域网）</p><p><strong><em>VLAN端口的分类</em></strong></p><p>根据端口对VLAN数据帧的处理方式，将交换机的端口氛围Access, Trunk, Hybrid三类。</p><ul><li>Access端口一般指那些<strong>连接不支持VLAN技术的终端设备</strong>的端口，这些端口收到的数据帧都不包含VLAN标签，向外发送数据帧是，也必须保证数据帧中也不包含VLAN标签。一般接主机或路由器。</li><li>Trunk端口一般指那些<strong>连接支持VLAN技术的网络设备</strong>（如交换机）的端口，这些端口接收到的数据帧一般都包含VLAN标签，而向外发送数据帧时，必须保证接收端能够区分不同VLAN的数据帧，故常常需要添加VLAN标签。一般用于交换机之间的连接。</li><li>Hybrid端口属于Access和Trunk的<strong>混合模式</strong>，工作在该模式下的端口可以属于多个VLAN，可以接收和发送多个VLAN报文，可以用于交换机之间连接，也可以用于连接用户的计算机。</li></ul><p><strong><em>VLAN的配置</em></strong></p><ul><li><p>创建/删除VLAN</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[h3c] vlan 2</span><br><span class="line">[h3c] undo vlan 2</span><br></pre></td></tr></table></figure></li><li><p>向当前VLAN中添加/删除端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[h3c-vlan2] port e 1&#x2F;0&#x2F;1</span><br><span class="line">[h3c-vlan2] undo port e 1&#x2F;0&#x2F;1</span><br></pre></td></tr></table></figure></li><li><p>指定端口类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[h3c-Ethernet 1&#x2F;0&#x2F;24] port link-type access | trunk | hybrid</span><br></pre></td></tr></table></figure></li><li><p>指定/删除端口的默认VLAN ID</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[h3c-Ethernet 1&#x2F;0&#x2F;1] port trunk pvid vlan 2</span><br><span class="line">[h3c-Ethernet 1&#x2F;0&#x2F;1] undo port hybrid pvid</span><br></pre></td></tr></table></figure></li><li><p>指定/删除Trunk端口可以通过的VLAN数据帧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[h3c-Ethernet 1&#x2F;0&#x2F;24] port trunk permit vlan 2 to 3</span><br></pre></td></tr></table></figure></li><li><p>将Hybrid端口加入到指定的已经存在的VLAN，并标记为tagged或untagged</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[h3c-Ethernet 1&#x2F;0&#x2F;24] port hybrid vlan 30 40 untagged</span><br></pre></td></tr></table></figure></li></ul><p><strong><em>实验要点</em></strong></p><ul><li>先配置基本VLAN，此时两台交换机上相同的VLAN内的主机还不能通信</li><li>配置交换机上的Trunk端口，并允许相应VLAN通过。此时配置为Trunk的接口标记为tagged，表示从该端口通过的报文要打上<code>IEEE 802.1q</code>标记，用于标记该报文所属的VLAN</li><li>这样，当对端交换机收到该报文时，根据tag标记来确定该报文属于哪个VLAN，从而只在该VLAN中广播或单播该报文</li></ul><h5 id="广域网数据链路层协议"><a href="#广域网数据链路层协议" class="headerlink" title="广域网数据链路层协议"></a>广域网数据链路层协议</h5><p>广域网链路层<code>PPP</code>的基本原理和基本配置</p><ul><li><p>配置PPP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[R1] interface s 1&#x2F;0</span><br><span class="line">[R1-serial 1&#x2F;0] link-protocol ppp</span><br><span class="line"># 之后需要shutdown来重启生效</span><br></pre></td></tr></table></figure></li><li><p>配置路由器上PPP的身份验证（PAP, CHAP）</p></li></ul><h4 id="实验三-网络层实验"><a href="#实验三-网络层实验" class="headerlink" title="实验三 网络层实验"></a>实验三 网络层实验</h4><h5 id="ARP分析"><a href="#ARP分析" class="headerlink" title="ARP分析"></a>ARP分析</h5><p>ARP(Address Resolution Protocol)是<strong>地址解析协议</strong>的简称。<strong>地址解析</strong>指的是建立硬件地址与IP地址的映射关系，将IP地址解析成硬件地址。主机存在<strong>ARP缓存</strong>，存放最近的IP地址与硬件地址的对应关系。如果找到相应项，便将报文直接发送出去，否则利用ARP进行解析。</p><ul><li><strong>相同网段：</strong>主机A发送ARP请求报文，主机B收到后，判断报文的目的IP是自己的后，便将自己的硬件地址写入应答报文，发给主机A。主机A收到后将其存入缓存，然后才将报文发往主机B</li><li><strong>不同网段：</strong>主机A将报文<strong>发给自己的默认网关</strong>，请求默认网关的硬件地址同相同网段上的方法。此后默认网关根据目的IP进行转发。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#清空arp缓存</span><br><span class="line">C:\&gt;arp -d</span><br><span class="line">#查看arp缓存</span><br><span class="line">C:\&gt;arp -a</span><br></pre></td></tr></table></figure><p><strong>默认网关：</strong>不同网段下的主机通信，必须经过网关的转发。默认网关的意思是一台主机如果找不到可用的网关，就把数据包发给默认指定的网关，由这个网关来处理数据包。</p><h5 id="ICMP分析"><a href="#ICMP分析" class="headerlink" title="ICMP分析"></a>ICMP分析</h5><p>ICMP(Internet Control Message Protocol)是<strong>因特网控制报文协议</strong>，允许路由器或主机报告差错情况和提供有关信息。ICMP报文将作为IP数据报的数据，封装在IP数据报中进行传输。可分为ICMP差错报告报文和ICMP询问报文。</p><p>目前网络中常见的基于ICMP的应用程序主要有ping和tracert命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#打开对tracert响应</span><br><span class="line">[S1] ip ttl-expires enable</span><br><span class="line">[S1] ip unreachables enable</span><br></pre></td></tr></table></figure><h5 id="IP分析"><a href="#IP分析" class="headerlink" title="IP分析"></a>IP分析</h5><p>数据报文在网络中的传输主要分为<strong>主机发送和路由器转发</strong>两种。</p><ul><li><strong>主机发送</strong>数据报的方式有<strong>直接交付和间接交付</strong>两种。<ul><li>主机将要发送数据报的目的地址同自己的子网掩码与操作，若结果等于其所在网络地址，则直接交付到本网络</li><li>否则发往下一跳路由器（一般为主机的默认网关）</li></ul></li><li><strong>路由器转发</strong>数据报的方法如下：<ul><li>先判断能否直接交付，不能则查找路由表</li><li>若表中无该目的地址，则通过’’与’’判断是否属于路由表中的网络</li><li>选择具有最长网络前缀的路由表项，将数据报传送给对应的下一跳路由器</li><li>否则报告转发分组出错</li></ul></li></ul><h5 id="网络层分片实验"><a href="#网络层分片实验" class="headerlink" title="网络层分片实验"></a>网络层分片实验</h5><p>由于存在MTU（最大传输单元），有时我们需要将报文分成几片分别传输。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#设置路由器端口MTU</span><br><span class="line">[H3C-Ethernet0&#x2F;0] mtu 100</span><br><span class="line">#设置ping命令数据部分大小</span><br><span class="line">[H3C-Ethernet0&#x2F;0] ping -s 300 192.192.169.21</span><br></pre></td></tr></table></figure><h5 id="VLAN间通信"><a href="#VLAN间通信" class="headerlink" title="VLAN间通信"></a>VLAN间通信</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 清空交换机MAC地址表</span><br><span class="line">[S1] undo mac-address</span><br><span class="line"># 清空三层交换机S1的ARP缓存</span><br><span class="line">&lt;S1&gt; reset arp all</span><br><span class="line"># 清空计算机的ARP缓存</span><br><span class="line">arp -d</span><br></pre></td></tr></table></figure><font color=Red>三层交换机与两层交换机的区别???</font><h4 id="实验四-RIP协议实验"><a href="#实验四-RIP协议实验" class="headerlink" title="实验四 RIP协议实验"></a>实验四 RIP协议实验</h4><h4 id="实验五-OSPF协议分析"><a href="#实验五-OSPF协议分析" class="headerlink" title="实验五 OSPF协议分析"></a>实验五 OSPF协议分析</h4><h5 id="OSPF协议概述及基本配置"><a href="#OSPF协议概述及基本配置" class="headerlink" title="OSPF协议概述及基本配置"></a>OSPF协议概述及基本配置</h5><p><strong><em>OSPF协议概述</em></strong></p><p>OSPF协议是一个<strong>基于链路状态算法</strong>的内部网关协议，OSPF是<strong>开放最短路由优先</strong>(Open Shortest Path First)的缩写。其核心思想是，每一台路由器将其周边的链路状态（包括接口的直连网段、相连的路由器等信息）描述出来，发送给网络中相邻的路由器。经过一段时间的链路状态信息交互，每台路由器都保存了一个<strong>链路状态数据库LSDB</strong>，该数据库是整个网络完整的链路状态描述，在此基础上，应用shortest path first算法就可以计算路由。</p><ol><li><p><strong>自治系统和区域</strong></p><p><strong>自治系统</strong>(Autonomy System)是指由同一机构管理，使用<strong>同一组选路策略</strong>的路由器的集合。它最主要的特点是有权自主地决定在<strong>本系统内采用何种路由选择协议</strong>。</p><p><strong>区域</strong>(Area)指的是一个路由器的集合，相同区域有着相同的拓扑结构数据库。OSPF用区域把一个AS划分成多个链路状态域。区域ID用一个32位整数标识。</p></li><li><p><strong>OSPF的邻居和邻接概念</strong></p><p>OSPF路由器启动后，便会通过OSPF接口向外发送hello报文。收到hello报文的OSPF路由器会检查报文中定义的一些参数，如果双方一直就会形成<strong>邻居关系</strong>。但只有当双方成功交换链路状态通告信息，才形成<strong>邻接关系</strong>。</p></li></ol><p><strong><em>OSPF基本配置</em></strong></p><ol><li><p><strong>配置router id</strong></p><p>如果没有人为指定，路由器会<strong>自动选择</strong>一个接口的IP地址为router id。一般优先选择路由器<strong>回环接口(Loopback)中最大IP地址</strong>，如果没有配置Loopback接口，就选取<strong>物理接口中最大的IP地址</strong>。如果一台路由器的router id在运行中被改变，则<strong>必须重启OSPF协议</strong>或重启路由器才能使其生效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">system-view</span><br><span class="line">router id (router-id)</span><br><span class="line">undo router id</span><br></pre></td></tr></table></figure></li><li><p><strong>启动OSPF</strong></p><p>OSPF支持多进程，一台路由器上的多个进程由<strong>进程号</strong>区分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ospf [process-id [[router-id router-id] vpn-instance vpn-instance-name]]</span><br><span class="line">undo ospf [process-id]</span><br></pre></td></tr></table></figure></li><li><p><strong>进入OSPF区域视图</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">area (area-id)</span><br><span class="line">undo area (area-id)</span><br></pre></td></tr></table></figure></li><li><p><strong>在指定网段使能OSPF</strong></p><p>启动OSPF后还必须<strong>指定在某个网段上</strong>应用OSPF</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">network (ip-address) (wildcard-mask)</span><br><span class="line">undo network (ip-address) (wildcard-mask)</span><br></pre></td></tr></table></figure></li></ol><p><strong><em>OSPF相关命令</em></strong></p><p><img src="计网实验复习笔记.asset/image-20240510094138886.png" alt="image-20240510094138886"></p><h5 id="OSPF协议报文交互过程"><a href="#OSPF协议报文交互过程" class="headerlink" title="OSPF协议报文交互过程"></a>OSPF协议报文交互过程</h5><p><strong><em>OSPF协议报文结构</em></strong></p><ol><li><p>OSPF报文头</p></li><li><p>OSPF协议的可靠传输机制</p><p>OSPF协议基于IP，IP无法提供可靠传输，所以OSPF协议采用了确认和重传机制。</p></li><li><p>OSPF的5种报文类型</p><ol><li><strong>Hello报文</strong>(Hello Packet)：<strong>周期性地发送</strong>给本路由器的邻居</li><li><strong>DD报文</strong>(Database Description Packet)：用于<strong>交换邻居路由器之间链路状态数据库的摘要信息</strong>。分为<strong>空DD报文和带有摘要信息的DD报文</strong>两种，开始时，两个邻居路由器互相发送空DD报文，用来确定<strong>主从关系</strong>，之后才发送带有摘要信息的DD报文。</li><li><strong>LSR报文</strong>(Link State Request Packet)：交换了DD报文后，通过比较能够确认本地链路状态数据库缺少的LSA和需要更新的LSA，需要发送LSR报文<strong>向对方请求所需要LSA</strong>，报文内容包括所需要的<strong>LSA的摘要</strong>。</li><li><strong>LSU报文</strong>(Link State Update Packet)：用来向发送LSR报文的路由器<strong>发送其所需要的LSA</strong>，报文内容是多条LSA的集合。</li><li><strong>LSAck报文</strong>(Link State Acknowledgement Packet)：用来对接收到的LSU报文进<strong>行确认</strong>，报文内容是需要确认的LSA的首部。</li></ol><p>注：LSA为链路状态通告(Link State Advertise)</p></li></ol><p><strong><em>邻居状态机</em></strong></p><p><img src="计网实验复习笔记.asset/image-20240510100959852.png" alt="image-20240510100959852"></p><p><strong><em>OSPF报文交互过程</em></strong></p><ol><li>Hello报文发现邻居</li><li>DD报文的主从关系协商（router id较大的成为主）</li><li>DD报文交换</li><li>LSA请求</li><li>LSA更新</li><li>LSA应答</li></ol><p><img src="计网实验复习笔记.asset/image-20240510102333316.png" alt="image-20240510102333316"></p><h5 id="OSPF协议链路状态描述"><a href="#OSPF协议链路状态描述" class="headerlink" title="OSPF协议链路状态描述"></a>OSPF协议链路状态描述</h5><p><strong><em>OSPF协议的4种网络类型</em></strong></p><ul><li>广播类型：在该类型的网络中，通常以组播形式发送协议报文，选举指定路由器DR和备份指定路由器BDR</li><li>NBMA类型：全连接的非广播多点可达网络NBMA(Non-Broadcast Multi-Access)。以单播形式发送协议报文。手工指定邻居，选举DR和BDR，DR和BDR要求与DRother完全直连</li><li>点到多点PTMP类型：以组播形式发送协议报文。组播Hello报文自动发现邻居，不要求DR/BDR选举</li><li>点到点PTP类型：以组播形式发送协议报文，无需选举DR/BDR</li></ul><p><strong><em>链路状态描述</em></strong></p><p>OSPF协议将路由器周边的网络拓扑结构抽象为4种典型的网络模型，分别为<strong>Stub net、PPP网络、点到多点网络、全连接网络</strong>。对每种类型网络的链路状态描述都可以分为两部分，分别是对<strong>相连网段</strong>的描述和对<strong>相连路由器</strong>的描述。每部分都包括link id, data, type, metric四部分。</p><p><img src="计网实验复习笔记.asset/image-20240510160738227.png" alt="image-20240510160738227"></p><ul><li>Stub net网络描述<ul><li>是指所连接的一个末端网络，该网段没有其他运行OSPF协议的网络设备，只有如计算机这样的设备</li></ul></li><li>PPP网络描述<ul><li>是指通过一条<strong>点到点</strong>的链路<strong>连接另外一台</strong>运行OSPF的路由器</li></ul></li><li>点到多点网络描述<ul><li>是指通过一个<strong>点对多点</strong>的网络<strong>连接另外多台</strong>运行OSPF的路由器，但这些路由器彼此之间并<strong>不是全连通</strong>的</li></ul></li><li>全连接网络描述<ul><li>全连接的网络用第二类LSA描述，其他类型网络用第一类</li></ul></li></ul><p><strong><em>指定路由器DR的选举与第二类LSA</em></strong></p><ol><li><p><strong>指定路由器DR和备份指定路由器BDR</strong></p><p>为了解决全连接网络中N^2连接问题，OSPF协议从该网络中自动选举一台路由器为指定路由器DR，DR路由器负责传递信息。所有路由器都<strong>只将路由信息发送给DR</strong>，再由DR将路由信息发送给本网段内的其他路由器。</p><p>考虑到DR可能失效，为缩短重新选举时间，OSPF提出备份制定路由BDR的方式，他<strong>和DR同时选举出来</strong>，也与该网段内的所有路由器建立邻接关系并交换路由信息。</p><p>这样DRother之间不在建立邻接关系，也不再交换路由信息，只是周期性交换hello报文，邻居状态机停留在<strong>2-way阶段</strong>。</p></li><li><p><strong>DR和BDR的选举过程</strong></p><p>//todo</p></li><li><p><strong>全连接网络描述</strong></p><p>全连接网络是指一个广播或者NBMA网段，该网段中所有运行OSPF协议的网络设备之间都直接相连。</p><p><img src="计网实验复习笔记.asset/image-20240514135124144.png" alt="image-20240514135124144"></p></li></ol><p><strong><em>链路状态通告LSA的结构</em></strong></p><p>//todo</p><p><strong><em>实验要点</em></strong></p><ul><li><p>显示LSA信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[R2] display ospf lsdb</span><br></pre></td></tr></table></figure></li><li><p>在路由器上显示第二类LSA信息的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[R2] display ospf lsdb network</span><br></pre></td></tr></table></figure></li><li><p>重启OSPF进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reset ospf process</span><br></pre></td></tr></table></figure></li><li><p>显示OSPF调试信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;R1&gt; debugging ospf event</span><br><span class="line">&lt;R1&gt; terminal debugging</span><br></pre></td></tr></table></figure></li></ul><h5 id="区域划分及LSA种类"><a href="#区域划分及LSA种类" class="headerlink" title="区域划分及LSA种类"></a>区域划分及LSA种类</h5><p><strong><em>OSPF协议的区域划分</em></strong></p><p>随着网络规模扩大，LSA(链路状态通告)的集合组成的链路状态数据库(LSDB)会非常庞大，OSPF协议通过划分区域的方式解决。</p><p>区域的边界是路由器，这样<strong>会有一些路由器同时属于不同区域</strong>（ABR，区域边界路由器），但一个网段只能属于一个区域，每个运行OSPF协议的<strong>接口必须明确属于某一个特定的区域</strong>。</p><p>划分区域后，区域内部仍使用第一类和第二类LSA描述区域内网络，并仅限在区域内传播。区域边界路由器收到后，会生成第三类LSA，并传播到相邻的区域。</p><p><strong><em>OSPF与自治系统外部通信</em></strong></p><p>//</p><p><strong><em>LSA种类</em></strong></p><p><img src="计网实验复习笔记.asset/image-20240514141628283.png" alt="image-20240514141628283"></p><p><strong><em>骨干区域与虚连接</em></strong></p><p>Area 0被称为骨干区域</p><h5 id="OSPF协议路由的计算"><a href="#OSPF协议路由的计算" class="headerlink" title="OSPF协议路由的计算"></a>OSPF协议路由的计算</h5><p><strong>6.3.1 SPF算法和Cost值</strong></p><ol><li><p>SPF算法</p><p>SPF算法有时也称为Dijkstra算法，每个路由器根据其上某区域的LSDB，计算出该区域的拓扑结构图，也就是一个加权有向图。SPF算法基于此图，以该路由器为根，计算得到最小生成树，进而获得到每一个目的网段的路由。</p></li><li><p>Cost值</p><p>每一个启动了OSPF的链路都定义了一个Cost值。值越小说明带宽越高，优先级越高。</p></li></ol><p><strong>6.3.2 区域内OSPF路由的计算过程</strong></p><p><img src="计网实验复习笔记.asset/image-20240514142602958.png" alt="image-20240514142602958" style="zoom: 67%;" /></p><p><strong>6.3.3  区域间OSPF路由的计算</strong></p><ol><li>只有同一个区域内的路由器保持LSDB同步</li><li>区域间路由计算通过ABR完成。查询路由表，为每一条OSPF路由生成一条type 3的LSA，发送到另一个区域</li><li>另一个区域内的路由器根据这些LSA生成路由</li></ol><p><strong>6.3.4 区域外OSPF路由的计算</strong></p><p><strong>6.3.5 OSPF路由的类型和优选顺序</strong></p><h5 id="实验要点"><a href="#实验要点" class="headerlink" title="实验要点"></a>实验要点</h5><ul><li><p>在接口上配置Cost的命令</p><ul><li>对于一条线路，两端接口均要进行cost配置</li></ul><p><img src="计网实验复习笔记.asset/image-20240514143530064.png" alt="image-20240514143530064" style="zoom: 80%;" /></p></li><li><p>验证路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[R1] tracert 10.1.1.2</span><br></pre></td></tr></table></figure></li></ul><h4 id="实验六-BGP协议实验"><a href="#实验六-BGP协议实验" class="headerlink" title="实验六 BGP协议实验"></a>实验六 BGP协议实验</h4><h5 id="BGP的基本分析"><a href="#BGP的基本分析" class="headerlink" title="BGP的基本分析"></a>BGP的基本分析</h5><p>BGP的基本功能是在自治系统间自动交换无环路的路由信息</p><p><strong>2.3.3 BGP的工作机制</strong></p><p>发送BGP报文的路由器称为BGP<strong>发言人</strong>(Speaker)，与他交换路由信息的其他BGP发言人称为<strong>对等体</strong>(Peer)，若干相关对等体可以构成<strong>对等体组</strong>(Group)。BGP发言人不断接收或产生新路由信息，并将它<strong>通告</strong>(Advertise)给其他BGP发言人。</p><p>对于一个自治系统边界路由器(ASBR)，路由的来源有两种，BGP发送优选的BGP路由和引入的IGP路由给对等体：</p><ul><li><strong>对等体接收</strong>：根据其属性进行过滤，根据规则选择最好的路由加入IP路由表</li><li><strong>IGP引入</strong>：要经过引入策略的过滤</li></ul><p>BGP在路由器上以EBGP和IBGP两种方式运行：</p><ul><li><strong>EBGP</strong>：属于不同AS的交换报文</li><li><strong>IBGP</strong>：对等体属于同一个AS，IBGP对等体之间不一定是物理直连，但要保证能够建立TCP连接</li></ul><p><strong>2.3.4 BGP路由通告原则</strong></p><ol><li>到达同一目的网络存在多条路径时，选择最优的</li><li>只把自己使用的路由通告给对等体</li><li>从EBGP获得的路由向所有BGP对等体通告</li><li>从IBGP获得的路由不会向IBGP对等体通告</li><li>从IBGP获得的路由是否通告给EBGP对等体要根据IGP和BGP<strong>同步情况</strong>决定</li><li>连接建立，发言人立即将自己所有BGP路由通告给新对等体</li></ol><p><strong>2.3.5 如何成为BGP路由</strong></p><p>BGP的主要工作是在AS间传递路由，而不是发现和计算路由。后者有IGP(OSPF)完成。BGP的路由信息需要通过配置命令的方式注入BGP中。</p><ul><li>纯动态注入：路由器将通过IGP获得的路由信息直接注入BGP，不进行过滤和选择</li><li>半动态注入：路由器有选择地将IGP发现的路由信息注入BGP</li><li>静态注入：路由器将静态配置的某条路由注入BGP</li></ul><p><strong>2.3.6 BGP的报文结构</strong></p><p>OPEN报文用于建立邻居关系，其他对等体收到后，立即以KEEPALIVE报文作响应。握手成功后，BGP邻居可以进行UPDATE, KEEPALIVE以及NOTIFICATION等报文的交互操作。</p><ul><li><strong>OPEN</strong><ul><li>对等体间通过发送OPEN报文交换各自版本、AS号等信息，<strong>进行协商</strong></li></ul></li><li><strong>UPDATE</strong><ul><li>UPDATE报文携带<strong>路由更新信息</strong>，包括撤销路由信息和可达路由信息及其路径属性</li><li>最多由三部分组成：<ul><li>不可达路由</li><li>路径属性</li><li>网络可达性信息</li></ul></li></ul></li><li><p><strong>NOTIFICATION</strong></p><ul><li>检测到差错时，发送NOTIFICATION报文，<strong>关闭同对等体的连接</strong></li></ul></li><li><p><strong>KEEPALIVE</strong></p><ul><li>在BGP对等体间周期性地发送，以<strong>确保连接保持有效</strong></li></ul></li></ul><p><strong>实验要点</strong></p><ul><li><p>启动BGP，加入对等体</p><ul><li><strong>对于IBGP需要强制下一跳为</strong></li></ul><p><img src="计网实验复习笔记.asset/image-20240514151027648.png" alt="image-20240514151027648"></p></li><li><p>注入路由信息</p><p><img src="计网实验复习笔记.asset/image-20240514151139557.png" alt="image-20240514151139557"></p></li><li><p>指定源地址的ping操作</p><p><img src="计网实验复习笔记.asset/image-20240514151212655.png" alt="image-20240514151212655"></p></li><li><p>取消BGP协议配置</p><ul><li>undo bgp</li></ul></li></ul><h5 id="BGP状态机的分析"><a href="#BGP状态机的分析" class="headerlink" title="BGP状态机的分析"></a>BGP状态机的分析</h5><p><img src="计网实验复习笔记.asset/image-20240514151506991.png" alt="image-20240514151506991" style="zoom:80%;" /></p><ul><li><p>获取debug信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;R1&gt; debug bgp event</span><br><span class="line">&lt;R1&gt; terminal debugging</span><br><span class="line">&lt;R1&gt; reset bgp all</span><br></pre></td></tr></table></figure></li></ul><h5 id="BGP的路由聚合"><a href="#BGP的路由聚合" class="headerlink" title="BGP的路由聚合"></a>BGP的路由聚合</h5><p>路由聚合使得路由表中一个项目能够表示多个传统分类地址的路由，减少维护数目。</p><p><img src="计网实验复习笔记.asset/image-20240514151855214.png" alt="image-20240514151855214"></p><p><img src="计网实验复习笔记.asset/image-20240514151904328.png" alt="image-20240514151904328" style="zoom:80%;" /></p><h5 id="BGP的基本路由属性分析"><a href="#BGP的基本路由属性分析" class="headerlink" title="BGP的基本路由属性分析"></a>BGP的基本路由属性分析</h5><p><strong>5.3.2 常见的BGP路由属性</strong></p><ul><li>origin：<ul><li>0： IGP</li><li>1： EGP</li><li>2： 其他</li><li><img src="计网实验复习笔记.asset/image-20240516194516120.png" alt="image-20240516194516120" style="zoom:80%;" /></li></ul></li><li>as-path：<ul><li>避免环路</li><li>影响路径选择</li></ul></li><li><strong>next-hop：</strong><ul><li>BGP向IBGP通告从其他EBGP获得的路由时，不改变下一跳属性</li><li>BGP向EBGP通告路由时，下一跳是本地BGP与对端连接的端口地址</li><li>对于可以多路访问的网络</li></ul></li><li>MED：<ul><li>用于向外部邻居路由器指示进入某个具有多个入口的AS的优先路径，MED较小的优先</li></ul></li><li>local-preference（本地优先级）：<ul><li>用于帮助AS内部的路由器选择到外部的较好出口，值越大优先级越高</li></ul></li></ul><p><strong>5.5 实验要点</strong></p><ul><li><p>引入路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import-route protocol [ process-id ] [ med med | route-policy route-policy-name ]</span><br><span class="line">undo import-route protocol [ process-id ]</span><br><span class="line">#例如，引入直连路由</span><br><span class="line">[s1-bgp] import-route direct</span><br></pre></td></tr></table></figure></li><li><p>显示bgp路由表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[s1-bgp] display bgp routing-table</span><br></pre></td></tr></table></figure></li></ul><h5 id="BGP的路由策略"><a href="#BGP的路由策略" class="headerlink" title="BGP的路由策略"></a>BGP的路由策略</h5><p>BGP是在自治系统之间交换路由信息的，由于各种原因，BGP需要对发送和接收的路由信息进行<strong>过滤</strong>，也就是<strong>实施路由策略</strong>。路由策略是提供给路由协议<strong>实现信息过滤</strong>的手段。</p><ul><li>路由协议在与对端路由器进行路由信息交换时，可能需要只接收或发布一部分满足给定条件的路由信息。</li><li>路由协议（如OSPF）在引入其他路由协议（如BGP）的路由信息时，可能需要只引入一部分满足条件的路由信息，并对所引入的路由信息的某些属性进行设定以满足本协议的要求。</li></ul><p>路由策略一般由一系列的规则组成，这些规则大体上分为3类，分别作用于：路由发布、路由接收和路由引入。与路由策略相关的过滤器通常有：</p><ul><li><p><strong>访问控制列表（ACL）</strong>：</p><ul><li><p>定义路由器过滤数据包的规则</p></li><li><p>是由permit | deny语句组成的<strong>有顺序</strong>规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查看规则</span><br><span class="line">display acl</span><br></pre></td></tr></table></figure></li><li><p><img src="计网实验复习笔记.asset/image-20240514185020245.png" alt="image-20240514185020245" style="zoom:80%;" /></p></li></ul></li><li><p><strong>自治系统路径信息访问列表（AS-Path List）</strong>：</p><ul><li>指定BGP从对等体输入或向对等体输出路由信息时，过滤含有指定AS路径属性的路由</li></ul></li><li><p><img src="计网实验复习笔记.asset/image-20240514184132296.png" alt="image-20240514184132296" style="zoom:80%;" /></p></li><li><p><img src="计网实验复习笔记.asset/image-20240514184844264.png" alt="image-20240514184844264" style="zoom:80%;" /></p><ul><li><p><strong>路由策略：</strong></p><ul><li>每个路由策略可以有若干规则，用节点号标识。按节点号从小到大的顺序进行匹配，遇到第一个匹配的规则，就完成此次路由策略过程。</li><li><img src="计网实验复习笔记.asset/image-20240514184431671.png" alt="image-20240514184431671" style="zoom:80%;" /></li><li>复位BGP： reset bgp {all | peer-id}</li></ul></li></ul></li></ul><p><strong>6.4 实验要点</strong></p><ul><li>配置<strong>基于ACL</strong>的路由过滤<ul><li><img src="计网实验复习笔记.asset/image-20240514184725031.png" alt="image-20240514184725031" style="zoom:80%;" /></li></ul></li><li>配置<strong>基于As-Path</strong>的路由过滤<ul><li><img src="计网实验复习笔记.asset/image-20240514185240957.png" alt="image-20240514185240957" style="zoom:80%;" /></li></ul></li><li>配置<strong>基于Route Policy</strong>的路由过滤<ul><li><img src="计网实验复习笔记.asset/image-20240514185617504.png" alt="image-20240514185617504" style="zoom:80%;" /></li></ul></li></ul><h5 id="BGP的同步机制"><a href="#BGP的同步机制" class="headerlink" title="BGP的同步机制"></a>BGP的同步机制</h5><p>BGP规定：一个BGP路由器不能将从IBGP对等体得知的路由信息通告给EBGP，除非该路由信息也能通过IGP得知，这就是<strong>同步机制</strong>。同步机制避免了通告路由但实际不可达的情况。</p><p><strong>解决方式</strong>：</p><ol><li><p>把从外部得到的BGP路由引入IGP中</p></li><li><p>在AS内相应路由器上配置静态路由</p></li></ol><p><em>注意下一跳中的端口地址是对等体的端口，而不是自己的端口</em></p><h4 id="实验七-传输层实验"><a href="#实验七-传输层实验" class="headerlink" title="实验七 传输层实验"></a>实验七 传输层实验</h4><p>主要有TCP和UDP两种传输协议。</p><h5 id="TCP基本分析"><a href="#TCP基本分析" class="headerlink" title="TCP基本分析"></a>TCP基本分析</h5><ul><li>TCP(Transfer Control Protocol)是传输控制协议的简称。TCP工作在网络层协议之上，是一个<strong>面向连接的、端到端的、可靠的</strong>传输层协议。</li><li>TCP采用运输连接的方式传送TCP报文，包括连接建立、数据传送和连接释放三个阶段。</li></ul><p><strong><em>1. TCP连接的建立</em></strong></p><p>采用3次握手方式（A主动打开，B被动打开）：</p><ul><li>主机A向主机B发出连接请求报文段，<strong>SYN置1</strong>，选择一个序号x（表明在之后传送数据时第一个数据字节的序号为x+1）</li><li>主机B收到连接请求报文后，若同意，则发回确认。<strong>SYN和ACK都置1</strong>，确认号为x+1，为自己选择一个序号y</li><li>最后主机A收到B的确认后，要向B给出确认，<strong>ACK置1</strong>，确认号为y+1，自己的序号为x+1</li></ul><p><strong><em>2. TCP数据的传送</em></strong></p><p>为保证TCP传输可靠性，采用<strong>面向字节</strong>的方式，每个字节对应一个序号。<strong>序号字段</strong>可以确认发送方传送数据的每一个字节的序号，<strong>确认号字段</strong>则表示接收方在此之前的数据字节均已收到。这样几做到了可靠传输，又做到了全双工通信。</p><p><strong><em>3. TCP连接的释放</em></strong></p><p>TCP连接的释放采用4次握手方式：</p><ul><li>主机A向主机B发出释放请求，且不再发送数据，<strong>FIN置1</strong>，其序号x等于前面已传过的数据的最后一个字节的序号加1(x+1)</li><li>主机B收到后发出确认，序号为y，确认号为x+1，同时通知高层应用进程。此时A到B的连接已释放，相当于“A没有数据发送了，但仍接收B发送的数据”</li><li>若主机B不再向主机A发送数据，则终止比特<strong>FIN和确认比特ACK置1</strong>，并使序号仍为y，重复上次发过的ACK=x+1</li><li>主机A需要发出确认，<strong>ACK置1</strong>，ACK=y+1，序号为x+1</li></ul><h5 id="TCP的拥塞控制"><a href="#TCP的拥塞控制" class="headerlink" title="TCP的拥塞控制"></a>TCP的拥塞控制</h5><p><strong><em>TCP的滑动窗口机制</em></strong></p><p>TCP采用大小可变的滑动窗口进行流量控制。</p><p>发送端设置的当前能够发送的数据量大小叫做<strong>发送窗口</strong>，上限值为cwnd和rwnd的较小值。</p><ul><li><p><strong>发送窗口</strong>在连接建立时由双方商定，但接收端可根据自己的接收缓存的大小，动态调整发送端的发送窗口的上限值。这就是<strong>接收端窗口</strong>rwnd，被放在接收端发送的<strong>TCP报文段首部的窗口字段</strong>中。</p></li><li><p>同时，发送端根据其对当前网络拥塞程度的估计而确定的窗口值，叫做<strong>拥塞窗口</strong>cwnd，其大小与网络的带宽和时延密切相关。</p></li></ul><p><em>窗口合拢、窗口张开、窗口收缩</em></p><p><strong><em>TCP的慢启动和拥塞避免</em></strong></p><p>慢启动和拥塞避免分别是<strong>指数增长和线性增长</strong></p><p>设置慢启动门限ssthresh(slow start thresh)，超过门限则使用拥塞避免算法，否则为慢启动</p><p><strong><em>网络拥塞的处理</em></strong></p><p>网络拥塞是指发送端没有按时收到确认报文或者收到了重复的确认报文。发送端发现网络拥塞，重新设置慢启动门限：ssthresh=max(cwnd/2, 2*MSS(报文段最大长度))，以及cwnd=1</p><p><strong><em>TCP的超时与重传</em></strong></p><p>超时重传时间应略大于平均往返时延RTT</p><p><strong><em>TCP的窗口探查技术</em></strong></p><p>当接收端缓存已满，则向发送端发送一个窗口为0的通告报文。发送端收到后，停止发送报文，等待新的窗口通告。为了避免出现死锁，发送方使用一个坚持定时器<strong>周期性向接收方查询</strong>，以便发现窗口是否增大。</p><p><strong><em>TCP的快重传和快恢复</em></strong></p><p><strong><em>实验要点</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 在路由器上配置端口转发速率为10Mbps</span><br><span class="line">[R1]interface e0&#x2F;0</span><br><span class="line">[R1-Ethernet0&#x2F;0]qos lr outbound cir 10000</span><br></pre></td></tr></table></figure><h5 id="UDP分析"><a href="#UDP分析" class="headerlink" title="UDP分析"></a>UDP分析</h5><p>UDP(User Datagram Protocol)主要用来支持在计算机之间传输数据的网络应用，UDP报文封装在IP报文中传输。UDP是不可靠的，在传输数据之前不建立连接，传输过程中没有报文确认信息。</p><h4 id="实验七-应用层实验"><a href="#实验七-应用层实验" class="headerlink" title="实验七 应用层实验"></a>实验七 应用层实验</h4><h5 id="DNS协议分析"><a href="#DNS协议分析" class="headerlink" title="DNS协议分析"></a>DNS协议分析</h5><p>DNS是域名系统(Domain Name System)的缩写，主要用来将主机名和电子邮件目标地址映射成IP地址。</p><h5 id="HTTP分析"><a href="#HTTP分析" class="headerlink" title="HTTP分析"></a>HTTP分析</h5><h5 id="SMTP分析"><a href="#SMTP分析" class="headerlink" title="SMTP分析"></a>SMTP分析</h5><h5 id="FTP分析"><a href="#FTP分析" class="headerlink" title="FTP分析"></a>FTP分析</h5><h5 id="DHCP分析"><a href="#DHCP分析" class="headerlink" title="DHCP分析"></a>DHCP分析</h5><h4 id="实验八-综合组网实验"><a href="#实验八-综合组网实验" class="headerlink" title="实验八 综合组网实验"></a>实验八 综合组网实验</h4><h4 id="特别注意"><a href="#特别注意" class="headerlink" title="特别注意"></a>特别注意</h4><h5 id="1-什么时候用反掩码"><a href="#1-什么时候用反掩码" class="headerlink" title="1. 什么时候用反掩码"></a>1. 什么时候用反掩码</h5><ul><li><p>路由策略</p><ul><li><pre><code>[R1-acl-2001]rule permit source 10.0.0.0 0.0.0.255<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- OSPF路由注入</span><br><span class="line"></span><br><span class="line">  -</span><br></pre></td></tr></table></figure>[S1-ospf-area-0.0.0.0] network 30.1.1.0 0.0.0.255<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">##### 2. 缺省路由</span><br></pre></td></tr></table></figure>ip route-static 0.0.0.0 0.0.0.0 next-hop<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### 3. OSPF常见路由注入方式</span><br><span class="line"></span><br><span class="line">- network ip地址 **反掩码** </span><br><span class="line">- import-route direct</span><br><span class="line">- import-route static</span><br><span class="line"></span><br><span class="line">##### 4. BGP常见路由注入方式</span><br><span class="line"></span><br><span class="line">- network ip地址 **掩码** </span><br><span class="line">- import-route direct</span><br><span class="line">- import-route static</span><br><span class="line"></span><br><span class="line">##### 5. PPP协议启动</span><br><span class="line"></span><br><span class="line">PPP协议配置后，需要先shutdown再undo来重新启动端口，使协议生效</span><br><span class="line"></span><br><span class="line">##### 6. 启动debug信息指令汇总</span><br></pre></td></tr></table></figure># ospf&lt;R1&gt;debugging ospf event&lt;R1&gt;dterminal debugging# bgp&lt;R1&gt;debug bgp event&lt;R1&gt;terminal debugging# ppp&lt;R1&gt;debugging ppp all // 打开PPP的debug开关&lt;R1&gt;terminal debugging // 显示debug信息# PAP&lt;R1&gt;debugging ppp pap all&lt;R1&gt;terminal debugging<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### 7. 网络实验常见问题解答</span><br><span class="line"></span><br><span class="line">1. v5 和 v7 版本指令差异：</span><br><span class="line"></span><br><span class="line">   - 访问控制列表配置：</span><br><span class="line">     - v5: acl number 2001</span><br><span class="line">     - v7: acl basic 2001</span><br><span class="line">   - NAT地址转换：</span><br><span class="line">     - v5: nat address-group 1 192.168.5.105 192.168.5.109</span><br><span class="line">     - v7: nat address-group 1; address 192.168.5.105 192.168.5.109</span><br><span class="line"></span><br><span class="line">2. PC机无法抓到&#96;IEEE802.3&#96;格式报文</span><br><span class="line"></span><br><span class="line">   - 在本地属性中选择安装&#96;NWLink IPX&#x2F;SPX&#x2F;NETBIOS协议&#96;</span><br><span class="line">   - &#96;IEEE802.3&#96;是MAC帧结构的标准</span><br><span class="line">   - &#96;IEEE802.1Q&#96;是vlan tag</span><br><span class="line"></span><br><span class="line">3. 接口不停up和down</span><br><span class="line"></span><br><span class="line">   1. 线缆接触不良</span><br><span class="line">   2. 两个接口的有关协议自动协商不成功，需要将一方shutdown，配置完再undo</span><br><span class="line"></span><br><span class="line">4. quit和return命令</span><br><span class="line"></span><br><span class="line">   1. quit：回到上一级视图</span><br><span class="line">   2. return：直接回到用户视图</span><br><span class="line"></span><br><span class="line">5. debugging信息停不下来</span><br><span class="line"></span><br><span class="line">   1. 使用快捷键&#96;&lt;ctrl+O&gt;&#96;</span><br><span class="line">   2. 输入若干次quit+回车</span><br><span class="line"></span><br><span class="line">6. PPP实验的Serial接口问题</span><br><span class="line"></span><br><span class="line">   1. 避免s2&#x2F;0接口的干扰，先将其shutdown</span><br><span class="line"></span><br><span class="line">7. PAP认证问题</span><br></pre></td></tr></table></figure>#情况1[R1] local-user RTB class network[R10luser-network-RTB] service-type ppp#情况2[R2] local-user RTA[R2-luser-RTA]service-type ppp[P2-luser-RTA]password simple aaa</code></pre></li></ul></li></ul><ol><li><p>请求失败</p><ol><li>以管理员身份运行</li></ol></li><li><p>tracert -d 避免DNS干扰</p></li><li><p>小心出厂配置干扰</p><p>[h3c]undo interface vlan 1</p></li><li><p>BGP上的v7指令</p><ol><li><p>BGP基本配置</p></li><li><p>查看BGP邻居状态</p><p>display bgp peer ipv4</p></li><li><p>查看BGP路由</p><p>display bgp routing-table ipv4</p></li><li><p>路由聚合</p></li></ol></li><li><p>BGP default med命令不生效</p><p>采用路由策略配置：</p><p><img src="计网实验复习笔记.asset/image-20240520145845941.png" alt="image-20240520145845941"></p></li><li><p>TCP的seq number都是相对序号</p><p><code>wireshark, edit-&gt;preference-&gt;tcp-&gt;取消勾选relative seq number</code></p></li><li><p>TCP捎带确认</p><p>四次握手会合并为三次</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软工LOG笔记</title>
      <link href="/2024/06/11/%E8%BD%AF%E5%B7%A5LOG%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/06/11/%E8%BD%AF%E5%B7%A5LOG%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="软工前端-LOG"><a href="#软工前端-LOG" class="headerlink" title="软工前端_LOG"></a>软工前端_LOG</h1><h2 id="Pinia：状态管理"><a href="#Pinia：状态管理" class="headerlink" title="Pinia：状态管理"></a>Pinia：状态管理</h2><blockquote><p>是vue生态中vuex的替代者</p></blockquote><h3 id="主要优势"><a href="#主要优势" class="headerlink" title="主要优势"></a>主要优势</h3><ul><li><p>对vue2和vue3很好地支持</p></li><li><p>只有state, getters, actions，极大地简化了状态管理库的使用</p></li><li><p>不需要嵌套模块</p></li><li><p>完整的TypeScript支持，vuex对TS的语法支持不完整</p><blockquote><p>TypeScript是JavaScript的超集，覆盖全部元素</p></blockquote></li><li><p>代码更简洁，实现代码自动分割</p></li></ul><h3 id="创建store"><a href="#创建store" class="headerlink" title="创建store"></a>创建store</h3><h5 id="1-在main-js里引入pinia"><a href="#1-在main-js里引入pinia" class="headerlink" title="1. 在main.js里引入pinia"></a>1. 在main.js里引入pinia</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createPinia &#125; from &#39;pinia&#39;</span><br></pre></td></tr></table></figure><p>引入后，通过createPinia()得到实例，将其挂载到Vue根实例上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># main.js</span><br><span class="line"><span class="keyword">import</span> &#123;createApp&#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> &#123;createPinia&#125; <span class="keyword">from</span> <span class="string">'pinia'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建pinia实例</span></span><br><span class="line"><span class="keyword">const</span> pinia = createPinia()</span><br><span class="line"><span class="keyword">const</span> app = createApp()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载到vue根实例上</span></span><br><span class="line">app.use(pinia)</span><br><span class="line">app.mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><h5 id="2-创建store状态管理库"><a href="#2-创建store状态管理库" class="headerlink" title="2. 创建store状态管理库"></a>2. 创建store状态管理库</h5><p>在/src目录下新建一个store文件夹，在里面创建一个index.js文件，然后在其中进行：</p><ul><li><p>定义状态容器（仓库）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore&#125; <span class="keyword">from</span> <span class="string">'pinia'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mainStore = defineStore(<span class="string">'main'</span>,&#123;</span><br><span class="line">  state:<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  getters:&#123;&#125;,</span><br><span class="line">  actions:&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>defineStore()的第一个参数：给容器起名</li><li>defingStore()的第二个参数：配置对象，对容器的配置说明</li><li>state属性：存储全局状态</li><li>getters属性：监听状态变化，有缓存功能</li><li>actions属性：对state中数据变化的业务逻辑，相当于修改state全局状态数据</li></ul></li><li><p>定义容器中的state</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">state:<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">     helloPinia:<span class="string">'Hello Pinia!'</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这样helloPinia就是全局的状态数据，每个页面和组件都可以通过Pinia方法读取到</p></li></ul><h5 id="3-在vue3组件里读取store数据"><a href="#3-在vue3组件里读取store数据" class="headerlink" title="3. 在vue3组件里读取store数据"></a>3. 在vue3组件里读取store数据</h5><p>先引入mainStore，然后通过mainStore得到store实例，就可以在组件里调用store里state定义的状态数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;h2 class&#x3D;&quot;&quot;&gt;&#123;&#123; store.helloPinia&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123; mainStore &#125; from &quot;..&#x2F;store&#x2F;index&quot;;</span><br><span class="line">export default&#123;</span><br><span class="line">  setup()&#123;</span><br><span class="line">      const store &#x3D; mainStore();</span><br><span class="line">      </span><br><span class="line">      return&#123;</span><br><span class="line">          store,</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h5 id="4-Pinia改变状态数据和注意事项"><a href="#4-Pinia改变状态数据和注意事项" class="headerlink" title="4. Pinia改变状态数据和注意事项"></a>4. Pinia改变状态数据和注意事项</h5><h5 id="5-Pinia修改状态数据的多种方法"><a href="#5-Pinia修改状态数据的多种方法" class="headerlink" title="5. Pinia修改状态数据的多种方法"></a>5. Pinia修改状态数据的多种方法</h5><ul><li>调用组件中使用方法直接修改</li><li>使用$patch修改多条数据<ul><li>不是必须的</li><li>但是会加快修改速度</li></ul></li><li>在actions中写好逻辑，调用actions</li></ul><h5 id="6-Pinia中Getters使用"><a href="#6-Pinia中Getters使用" class="headerlink" title="6. Pinia中Getters使用"></a>6. Pinia中Getters使用</h5><ul><li>新增状态属性和编写Getters<ul><li>在state中增加一个Phone状态数据，在getters里编写一个方法用于隐藏手机号中间四位，在页面中通过store.phoneHidden调用显示隐藏号码</li></ul></li><li>Getters的缓存特性<ul><li>虽然调用多次，但值一样就不会被多次调用</li></ul></li></ul><h5 id="7-Pinia中Store的互相调用"><a href="#7-Pinia中Store的互相调用" class="headerlink" title="7. Pinia中Store的互相调用"></a>7. Pinia中Store的互相调用</h5><blockquote><p>真实项目中往往存在多个Store，会涉及到内部相互调用的问题</p></blockquote><p>直接在index1.js中引入index2.js包含的store2，然后调用方法即可：store2().list()</p><h2 id="前端打包"><a href="#前端打包" class="headerlink" title="前端打包"></a>前端打包</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>前端打包是指将多个模块、库、资源文件等组合成一个或多个输出文件的过程</p><h3 id="目的："><a href="#目的：" class="headerlink" title="目的："></a>目的：</h3><ul><li>减少HTTP请求数量</li><li>优化代码：打包工具通常提供代码压缩、去除未使用代码（Tree Shaking）等功能，可以减小文件大小</li><li>模块解析：打包工具处理模块之间的额依赖关系，确保代码的正确加载和执行顺序</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>使用webpack作为打包工具</p><p>配置Webpack（webpack.config.js）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>, <span class="comment">// 入口文件</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>, <span class="comment">// 打包后的文件名</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>) <span class="comment">// 输出路径</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mode: <span class="string">'production'</span> <span class="comment">// 生产模式，会进行代码优化等操作</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>执行打包命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack --config webpack.config.js</span><br></pre></td></tr></table></figure><h2 id="代码分割"><a href="#代码分割" class="headerlink" title="代码分割"></a>代码分割</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>代码分割是一种将代码拆分成多个独立块（chunk）的技术，以便按需加载或并行加载。这可以提高应用程序的加载性能</p><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><ul><li>按需加载：通过将代码分割成不同的块，可以根据用户需要只加载必要的代码，而不是一次性加载整个应用程序</li><li>提高性能：通过并行加载多个较小的代码块，可以更快地加载应用程序，减少用户的等待时间</li><li>缓存效率：当应用程序的某部分更新时，只需重新加载更改的代码块，而不是整个应用程序，这提高了缓存效率</li></ul><h2 id="打包工具"><a href="#打包工具" class="headerlink" title="打包工具"></a>打包工具</h2><h3 id="什么是打包工具"><a href="#什么是打包工具" class="headerlink" title="什么是打包工具"></a>什么是打包工具</h3><ul><li>WebPack是一个前端模块化<strong>方案</strong>，侧重模块打包，把开发中的所有资源（图片、js文件、css文件等）都看成模块，通过loader（加载器）和plugins（插件）对资源进行处理，打包成符合生产环境部署的前端资源，Gulp也可以配置seajs、requirejs甚至webpack的插件</li><li>它会分析你的项目结构，找到JS模块以及那些浏览器不能够直接运行的扩展语言（如：TypeScript等），然后将其转换和打包为合适的格式供浏览器使用。<strong>它最大的优点就是“模块化”（万物皆模块）</strong></li></ul><h4 id="1-代码模块化和依赖管理"><a href="#1-代码模块化和依赖管理" class="headerlink" title="1. 代码模块化和依赖管理"></a>1. 代码模块化和依赖管理</h4><p>现代 JavaScript 应用通常由许多小的模块组成，每个模块负责不同的功能。</p><ul><li><p><strong>模块化开发</strong>：将代码拆分成多个模块，可以提高代码的可维护性和可读性。</p></li><li><p><strong>依赖管理</strong>：前端打包工具（如 Webpack、Vite 等）能够自动解析模块间的依赖关系，确保正确的加载顺序。</p></li><li><p><strong>示例</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; hello &#125; <span class="keyword">from</span> <span class="string">'./hello.js'</span>;</span><br><span class="line">hello();</span><br><span class="line"></span><br><span class="line"><span class="comment">// hello.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello, World!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打包工具会自动处理这些模块的依赖关系，并将它们打包成一个单独的文件。</p></li></ul><h4 id="2-文件优化和性能提升"><a href="#2-文件优化和性能提升" class="headerlink" title="2. 文件优化和性能提升"></a>2. 文件优化和性能提升</h4><p>前端应用常常包含大量的静态资源，如 JavaScript、CSS、图片等。打包工具可以对这些资源进行优化，从而提升性能。</p><ul><li><p><strong>代码压缩（Minification）</strong>：打包工具可以删除代码中的空白字符、注释、未使用的代码等，减少文件大小。</p></li><li><p><strong>代码混淆（Obfuscation）</strong>：混淆代码以提高代码的难读性，增加代码安全性。</p></li><li><p><strong>代码分割（Code Splitting）</strong>：将应用分割成多个小包，按需加载，减少初始加载时间。</p></li><li><p><strong>示例</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打包前</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">longFunctionName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Hello, World!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打包后</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">"Hello, World!"</span>)&#125;</span><br></pre></td></tr></table></figure><p>通过压缩和混淆，可以显著减小文件大小。</p></li></ul><h4 id="3-提供开发工具和增强开发体验"><a href="#3-提供开发工具和增强开发体验" class="headerlink" title="3. 提供开发工具和增强开发体验"></a>3. 提供开发工具和增强开发体验</h4><p>打包工具通常集成了许多开发者友好的工具和功能，使开发过程更加高效。</p><ul><li><p><strong>实时重载（Hot Module Replacement, HMR）</strong>：在开发时，代码改变后，自动刷新页面或更新模块，而无需手动刷新。</p></li><li><p><strong>本地开发服务器</strong>：提供本地开发服务器，模拟真实环境进行开发。</p></li><li><p><strong>代码转换（Transpiling）</strong>：将现代 JavaScript（如 ES6+）或其他语言（如 TypeScript）转换成浏览器兼容的版本。</p></li><li><p><strong>示例</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 ES6 模块</span></span><br><span class="line"><span class="keyword">import</span> &#123; greet &#125; <span class="keyword">from</span> <span class="string">'./greet.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// greet.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> greet = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Hello, modern JavaScript!'</span>);</span><br></pre></td></tr></table></figure><p>打包工具会将这些 ES6 模块转换成 ES5 或更低版本，以兼容较旧的浏览器。</p></li></ul><h4 id="4-多种文件类型支持和预处理"><a href="#4-多种文件类型支持和预处理" class="headerlink" title="4. 多种文件类型支持和预处理"></a>4. 多种文件类型支持和预处理</h4><p>现代前端项目通常使用多种文件类型，打包工具可以处理和转换这些文件。</p><ul><li><p><strong>CSS 预处理</strong>：支持 SASS、LESS 等预处理器，允许在 CSS 中使用变量、嵌套等高级功能。</p></li><li><p><strong>图像和字体处理</strong>：优化和打包图像、字体等静态资源。</p></li><li><p><strong>构建工具集成</strong>：集成 Babel、PostCSS 等工具，提供更多功能和灵活性。</p></li><li><p><strong>示例</strong>：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SASS 文件</span></span><br><span class="line"><span class="variable">$primary-color</span>: <span class="number">#333</span>;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$primary-color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打包工具会将 SASS 文件编译成标准的 CSS 文件。</p></li></ul><h3 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h3><ul><li><strong>优点：</strong><ul><li>灵活的配置选项，满足复杂的项目需求</li><li>插件和加载器生态系统丰富</li><li>支持代码拆分、懒加载、文件压缩等优化</li><li>可以通过插件和加载器来扩展和定制Webpack的功能</li></ul></li><li><strong>缺点：</strong><ul><li>学习曲线较陡峭</li><li>配置相对复杂</li></ul></li></ul><h3 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h3><h5 id="依赖预构建的目的"><a href="#依赖预构建的目的" class="headerlink" title="依赖预构建的目的"></a>依赖预构建的目的</h5><ul><li><strong>CommonJs和UMD的兼容性：</strong>在开发阶段中，Vite 的开发服务器将所有代码视为原生 ES 模块。因此，Vite 必须先将以 CommonJS 或 UMD 形式提供的依赖项转换为 ES 模块。</li><li><strong>性能：</strong>为了提高后续页面的加载性能，Vite将那些具有许多内部模块的 ESM 依赖项转换为单个模块。<font color="Red">（ESM是ES6模块的简称）</font></li></ul><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><ul><li>Vite通过利用浏览器<strong>原生的ES模块导入</strong>，提供了快速的开发体验和构建过程</li><li>支持最新的前端技术</li></ul><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><ul><li>相对较新的工具，可能存在一些稳定性和兼容性问题</li></ul><h3 id="webpack和vite对比"><a href="#webpack和vite对比" class="headerlink" title="webpack和vite对比"></a>webpack和vite对比</h3><h4 id="1-核心概念—bundle与否"><a href="#1-核心概念—bundle与否" class="headerlink" title="1. 核心概念—bundle与否"></a>1. 核心概念—bundle与否</h4><ul><li>webpack使用Node.js编写的打包器从入口开始逐步构建依赖图，然后将项目中所需的模块组合成一个或多个bundle文件</li><li>vite无需进行bundle操作，源文件之间的依赖关系通过浏览器对ESM规范的支持来解析，将应用中的模块区分为依赖(node_modules)和源码(项目代码)两类<ul><li>依赖（node_modules）：使用esbuild预构建，esbuild使用go语言编写，比node.js编写的打包器与构建依赖快10-100倍</li><li>源码：在浏览器请求时按需转换并以元素ESM的方式提供源码，让浏览器接管了打包工具的部分工作</li></ul></li></ul><h4 id="2-首屏、懒加载性能"><a href="#2-首屏、懒加载性能" class="headerlink" title="2. 首屏、懒加载性能"></a>2. 首屏、懒加载性能</h4><ul><li>webpack经过漫长的bundle过程，得到了完整的模块关系依赖包，不存在这个问题</li><li>vite由于unbundle机制，在这方面存在问题<ul><li>未对源文件进行合并捆绑操作，导致大量http请求产生</li><li>预构建、二次构建操作也会阻塞首屏请求</li></ul></li></ul><h4 id="3-服务器启动速度"><a href="#3-服务器启动速度" class="headerlink" title="3. 服务器启动速度"></a>3. 服务器启动速度</h4><ul><li>webpack需要先把所有的模块建立依赖关系打包成一个大文件，速度相对较慢</li><li>vite将模块分为依赖和源码两部分进行预构建，快很多</li></ul><h2 id="Ajax和Axios"><a href="#Ajax和Axios" class="headerlink" title="Ajax和Axios"></a>Ajax和Axios</h2><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ol><li><p>Axios是一个基于Promise的HTTP库，而Ajax是对原生XHR的封装；</p></li><li><p>Ajax技术实现了局部数据的刷新，而Axios实现了对ajax的封装。</p></li></ol><h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><h4 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h4><p>Ajax是对原生XHR的封装，为了达到我们跨越的目的，增添了对JSONP的支持。</p><p>异步的javascript和xml，ajax不是一门新技术，而是多种技术的组合，用于快速的创建动态页面，能够实现无刷新更新数据从而提高用户体验。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li><p>无刷新更新数据</p></li><li><p>异步与服务器通信</p></li><li><p>前端和后端负载平衡</p></li><li><p>基于标准被广泛支</p></li><li><p>界面与应用分离</p></li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol><li>ajax不能使用Back和history功能，即对浏览器机制的破坏。</li><li>安全问题 ajax暴露了与服务器交互的细节</li><li>对收索引擎的支持比较弱</li><li>破坏程序的异常处理机制</li><li>违背URL和资源定位的初衷</li><li>ajax不能很好的支持移动设备</li><li>太多客户端代码造成开发上的成本</li></ol><h4 id="请求步骤"><a href="#请求步骤" class="headerlink" title="请求步骤"></a>请求步骤</h4><ul><li><p>创建XMLHttpRequest异步对象</p></li><li><p>设置回调函数</p></li><li><p>使用open方法与服务器建立连接</p></li><li><p>向服务器发送数据</p></li><li><p>在回调函数中针对不同的响应状态进行处理</p></li></ul><h3 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h3><h4 id="是什么-1"><a href="#是什么-1" class="headerlink" title="是什么"></a>是什么</h4><p>Axios 是一个基于 Promise 的 HTTP 库，可以用在浏览器和 node.js 中</p><h2 id="JavaScript简介"><a href="#JavaScript简介" class="headerlink" title="JavaScript简介"></a>JavaScript简介</h2><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><ul><li>ECMAScript: 定义核心语法，关键字，运算符等系列标准</li><li>DOM：文档对象模型<ul><li>专注于文档内容的结构化表示，允许你操作页面的元素和内容。</li></ul></li><li>BOM：浏览器对象模型<ul><li>主要涉及浏览器窗口和环境的控制，与浏览器交互的功能。</li><li>常见应用：<ul><li>控制窗口和弹出窗口：window</li><li>操作浏览器历史记录：history</li><li>动态URL操作：location</li><li>检测用户环境：navigator</li><li>获取屏幕信息：screen</li></ul></li></ul></li></ul><h2 id="webpack动态导入模块"><a href="#webpack动态导入模块" class="headerlink" title="webpack动态导入模块"></a>webpack动态导入模块</h2><p>在 JavaScript 的注释中指定 <code>webpackChunkName</code>，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "home" */</span> <span class="string">'./Home.vue'</span>)</span><br></pre></td></tr></table></figure><p>这行代码告诉 Webpack，在构建过程中将 <code>./Home.vue</code> 模块打包为名为 <code>home.js</code> 的代码块，而不是使用自动生成的名字。</p><h3 id="根据路由动态加载组件"><a href="#根据路由动态加载组件" class="headerlink" title="根据路由动态加载组件"></a>根据路由动态加载组件</h3><h4 id="使用-Vue-Router-和-Webpack-的动态导入"><a href="#使用-Vue-Router-和-Webpack-的动态导入" class="headerlink" title="使用 Vue Router 和 Webpack 的动态导入"></a>使用 Vue Router 和 Webpack 的动态导入</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* router/index.js */</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/home'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "home" */</span> <span class="string">'../views/Home.vue'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/about'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "about" */</span> <span class="string">'../views/About.vue'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  routes</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><ul><li>当用户导航到 <code>/home</code> 时，<code>Home.vue</code> 组件会被动态加载。</li><li>Webpack 将 <code>Home.vue</code> 及其依赖打包为一个名为 <code>home.js</code> 的代码块。</li><li>同样，当用户导航到 <code>/about</code> 时，<code>About.vue</code> 会被动态加载，并生成 <code>about.js</code>。</li></ul><h3 id="编译结果"><a href="#编译结果" class="headerlink" title="编译结果"></a>编译结果</h3><p>在编译完成后，Webpack 会在 <code>dist</code> 文件夹中生成多个代码块文件，其中 <code>home.js</code> 和 <code>about.js</code> 是通过动态导入生成的。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dist/</span><br><span class="line">  ├── app.js           // 应用的主文件</span><br><span class="line">  ├── vendor.js        // 第三方库和框架</span><br><span class="line">  ├── home.js          // 'home' 代码块</span><br><span class="line">  ├── about.js         // 'about' 代码块</span><br><span class="line">  └── ...</span><br></pre></td></tr></table></figure><h3 id="使用-webpackChunkName-的好处"><a href="#使用-webpackChunkName-的好处" class="headerlink" title="使用 webpackChunkName 的好处"></a>使用 <code>webpackChunkName</code> 的好处</h3><ol><li><strong>可读性</strong>：指定的名字更具可读性，方便调试和分析。</li><li><strong>维护性</strong>：更容易追踪和管理代码块。</li><li><strong>性能优化</strong>：配合其他 Webpack 功能，如缓存优化，可以进一步提高加载性能。</li></ol><h2 id="querySelector与getElementById"><a href="#querySelector与getElementById" class="headerlink" title="querySelector与getElementById"></a>querySelector与getElementById</h2><h3 id="querySelector"><a href="#querySelector" class="headerlink" title="querySelector"></a>querySelector</h3><ul><li><p>使用 <strong>CSS 选择器</strong> 语法，支持选择器的所有功能，包括类选择器、ID 选择器、属性选择器、伪类、组合选择器等。</p></li><li><p>可以选择文档中任意元素的第一个匹配项，灵活性高。</p></li><li><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="built_in">document</span>.querySelector(<span class="string">'.my-class'</span>); <span class="comment">// 选择第一个具有 "my-class" 类的元素</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="built_in">document</span>.querySelector(<span class="string">'#my-id'</span>); <span class="comment">// 选择具有 "my-id" ID 的元素</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="built_in">document</span>.querySelector(<span class="string">'div[data-type="example"]'</span>); <span class="comment">// 选择具有特定属性的第一个 div 元素</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="getElementById"><a href="#getElementById" class="headerlink" title="getElementById"></a>getElementById</h3><ul><li><p>仅接受元素的 <strong>ID 选择器</strong>（不带 <code>#</code>）。</p></li><li><p>只能选择具有指定 ID 的单个元素。</p></li><li><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="built_in">document</span>.getElementById(<span class="string">'my-id'</span>); <span class="comment">// 选择具有 "my-id" ID 的元素</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 前端笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Theme-Snail</title>
      <link href="/2019/11/01/Hexo-Theme-Snail/"/>
      <url>/2019/11/01/Hexo-Theme-Snail/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-theme-snail"><a href="#hexo-theme-snail" class="headerlink" title="hexo-theme-snail"></a>hexo-theme-snail</h1><p><a href="https://github.com/dusign/hexo-theme-snail" target="_blank" rel="noopener">View Hexo-Theme-Snail Sources On Github &#10174; </a></p><p><a href="https://www.dusign.net" target="_blank" rel="noopener">View Live Super Snail Blog &#10174;</a></p><p><img src="snail.png" alt="hexo-theme-snail"></p><p>Hexo-theme-snail is a succinct hexo theme. It has two colors, light and star, that can be set according to your own preferences in the settings, and also has the functions of sharing and commenting. More features are under development.</p><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><ul><li>light color theme and star theme</li><li>diversified comment system</li><li>notice tips</li><li>share to other platforms (under development)</li><li>picture sharing (under development)</li></ul><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Install-Hexo"><a href="#Install-Hexo" class="headerlink" title="Install Hexo"></a>Install Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h3 id="Setup-your-blog"><a href="#Setup-your-blog" class="headerlink" title="Setup your blog"></a>Setup your blog</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog</span><br></pre></td></tr></table></figure><h3 id="Installation-Theme"><a href="#Installation-Theme" class="headerlink" title="Installation Theme"></a>Installation Theme</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ rm -rf <span class="built_in">source</span></span><br><span class="line">$ rm _config.yml package.json README.md LICENSE</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/dusign/hexo-theme-snail.git</span><br><span class="line">$ mv ./hexo-theme-snail/snail ./themes</span><br><span class="line">$ mv ./hexo-theme-snail/* ./</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h3 id="Set-Theme"><a href="#Set-Theme" class="headerlink" title="Set Theme"></a>Set Theme</h3><p>Modify the value of <code>theme:</code> in <code>_config.yml</code><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">snail</span></span><br></pre></td></tr></table></figure></p><h3 id="Start-the-Server"><a href="#Start-the-Server" class="headerlink" title="Start the Server"></a>Start the Server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><h3 id="Site"><a href="#Site" class="headerlink" title="Site"></a>Site</h3><p>Replace the following information with your own.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> </span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">At</span> <span class="string">the</span> <span class="string">bottom</span> <span class="string">of</span> <span class="string">the</span> <span class="string">well,</span> <span class="string">it</span> <span class="string">is</span> <span class="string">destined</span> <span class="string">to</span> <span class="string">see</span> <span class="string">only</span> <span class="string">the</span> <span class="string">sky</span> <span class="string">at</span> <span class="string">the</span> <span class="string">wellhead.</span> </span><br><span class="line">          <span class="string">However,</span> <span class="string">the</span> <span class="string">starting</span> <span class="string">point</span> <span class="string">only</span> <span class="string">affects</span> <span class="string">the</span> <span class="string">process</span> <span class="string">of</span> <span class="string">reaching</span> <span class="string">your</span> <span class="string">peak</span> <span class="string">and</span> <span class="string">does</span> <span class="string">not</span> <span class="string">determine</span> <span class="string">the</span> <span class="string">height</span> <span class="string">you</span> <span class="string">reach.</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Dusign</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span></span><br><span class="line"><span class="attr">timezone:</span></span><br></pre></td></tr></table></figure></p><h3 id="Site-Settings"><a href="#Site-Settings" class="headerlink" title="Site Settings"></a>Site Settings</h3><p>Put customized pictures in <code>img</code> directory.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site settings</span></span><br><span class="line"><span class="attr">SEOTitle:</span> <span class="string">Hexo-theme-snail</span></span><br><span class="line"><span class="attr">email:</span> <span class="string">hexo-theme-snail@mail.com</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">"A hexo theme"</span></span><br><span class="line"><span class="attr">keyword:</span> <span class="string">"dusign, hexo-theme-snail"</span></span><br><span class="line"><span class="attr">header-img:</span> <span class="string">img/header_img/home-bg-1-dark.jpg</span></span><br><span class="line"><span class="attr">signature:</span> <span class="literal">true</span> <span class="comment">#show signature</span></span><br><span class="line"><span class="attr">signature-img:</span> <span class="string">img/signature/Just-do-it-white.png</span></span><br></pre></td></tr></table></figure></p><h3 id="SNS-Settings"><a href="#SNS-Settings" class="headerlink" title="SNS Settings"></a>SNS Settings</h3><p>If you don’t want to display it, you can delete it directly.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SNS settings</span></span><br><span class="line"><span class="attr">github_username:</span>    <span class="string">dusign</span></span><br><span class="line"><span class="attr">twitter_username:</span>   <span class="string">dusignr</span></span><br><span class="line"><span class="attr">facebook_username:</span>  <span class="string">Gang</span> <span class="string">Du</span></span><br><span class="line"><span class="attr">zhihu_username:</span> <span class="string">dusignr</span></span><br></pre></td></tr></table></figure></p><h3 id="Sidebar-Settings"><a href="#Sidebar-Settings" class="headerlink" title="Sidebar Settings"></a>Sidebar Settings</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Settings</span></span><br><span class="line"><span class="attr">sidebar:</span> <span class="literal">true</span>                      <span class="comment"># whether or not using Sidebar.</span></span><br><span class="line"><span class="attr">sidebar-about-description:</span> <span class="string">"Welcome to visit, I'm Dusign!"</span></span><br><span class="line"><span class="attr">sidebar-avatar:</span> <span class="string">img/ironman-draw.png</span>      <span class="comment"># use absolute URL, seeing it's used in both `/` and `/about/`</span></span><br><span class="line"><span class="attr">widgets:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">featured-tags</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">short-about</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">recent-posts</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">friends-blog</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">archive</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">category</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># widget behavior</span></span><br><span class="line"><span class="comment">## Archive</span></span><br><span class="line"><span class="attr">archive_type:</span> <span class="string">'monthly'</span></span><br><span class="line"><span class="attr">show_count:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Featured Tags</span></span><br><span class="line"><span class="attr">featured-tags:</span> <span class="literal">true</span>                     <span class="comment"># whether or not using Feature-Tags</span></span><br><span class="line"><span class="attr">featured-condition-size:</span> <span class="number">1</span>              <span class="comment"># A tag will be featured if the size of it is more than this condition value</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Friends</span></span><br><span class="line"><span class="attr">friends:</span> <span class="string">[</span></span><br><span class="line">    <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Dusign's Blog"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"https://blog.csdn.net/d_Nail"</span></span><br><span class="line">    <span class="string">&#125;,&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Dusign's Web"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"#"</span></span><br><span class="line">    <span class="string">&#125;,&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Dusign's Github"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"https://github.com/dusign"</span></span><br><span class="line">    <span class="string">&#125;,&#123;</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">"Other"</span><span class="string">,</span></span><br><span class="line">        <span class="attr">href:</span> <span class="string">"#"</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">]</span></span><br></pre></td></tr></table></figure><h3 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">snail</span></span><br></pre></td></tr></table></figure><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">      <span class="attr">github:</span> <span class="string">github.repository.address</span></span><br><span class="line">      <span class="attr">coding:</span> <span class="string">coding.repository.address</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h3 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h3><p>See httpymls://github.com/imsun/gitment for detailed configuration method.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Comment</span></span><br><span class="line"><span class="comment">## This comment system is gitment</span></span><br><span class="line"><span class="comment">## gitment url: https://github.com/imsun/gitment</span></span><br><span class="line"><span class="attr">comment:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">  <span class="attr">client_id:</span></span><br><span class="line">  <span class="attr">client_secret:</span></span><br></pre></td></tr></table></figure></p><h3 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Tip</span></span><br><span class="line"><span class="attr">tip:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">content:</span> <span class="string">欢迎访问</span> <span class="string">&lt;a</span> <span class="string">href="https://www.dusign.net"</span> <span class="string">target="dusign"&gt;dusign&lt;/a&gt;</span> <span class="string">的博客，博客系统一键分享的功能还在完善中，请大家耐心等待。</span></span><br><span class="line">          <span class="string">若有问题或者有好的建议欢迎留言，笔者看到之后会及时回复。</span></span><br><span class="line">          <span class="string">评论点赞需要github账号登录，如果没有账号的话请点击</span> </span><br><span class="line">          <span class="string">&lt;a</span> <span class="string">href="https://github.com"</span> <span class="string">target="view_window"</span> <span class="string">&gt;</span> <span class="string">github</span> <span class="string">&lt;/a&gt;</span> <span class="string">注册，</span> <span class="string">谢谢</span> <span class="string">!</span></span><br></pre></td></tr></table></figure><h3 id="Color-Sheme"><a href="#Color-Sheme" class="headerlink" title="Color Sheme"></a>Color Sheme</h3><p>Set the <code>enable</code> value of the desired color sheme to <code>true</code>. If the value of <code>bg_effects.star.enable</code> is <code>true</code>, please modify the value of <code>highlight_theme</code> in <code>./themes/snail/_config.yml</code> to <code>night</code>.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Color Sheme</span></span><br><span class="line"><span class="comment">## If there is no effect after modification, please empty the cache and try again.</span></span><br><span class="line"><span class="comment">## ⚠️ The following special effects will take up a lot of cpu resorces, please open it carefully.</span></span><br><span class="line"><span class="attr">bg_effects:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">color:</span> <span class="number">129</span><span class="string">,200,61</span></span><br><span class="line">    <span class="attr">pointColor:</span> <span class="number">129</span><span class="string">,200,61</span></span><br><span class="line">    <span class="attr">opacity:</span> <span class="number">0.7</span></span><br><span class="line">    <span class="attr">zIndex:</span> <span class="number">-9</span></span><br><span class="line">    <span class="attr">count:</span> <span class="number">99</span></span><br><span class="line">  <span class="attr">mouse_click:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">'"🌱","just do it","🌾","🍀","don'</span><span class="string">'t give up","🍂","🌻","try it again","🍃","never say die","🌵","🌿","🌴"'</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">'"rgb(121,93,179)"</span></span><br><span class="line"><span class="string">          ,"rgb(76,180,231)"</span></span><br><span class="line"><span class="string">          ,"rgb(184,90,154)"</span></span><br><span class="line"><span class="string">          ,"rgb(157,211,250)"</span></span><br><span class="line"><span class="string">          ,"rgb(255,0,0)"</span></span><br><span class="line"><span class="string">          ,"rgb(242,153,29)"</span></span><br><span class="line"><span class="string">          ,"rgb(23,204,16)"</span></span><br><span class="line"><span class="string">          ,"rgb(222,0,0)"</span></span><br><span class="line"><span class="string">          ,"rgb(22,36,92)"</span></span><br><span class="line"><span class="string">          ,"rgb(127,24,116)"</span></span><br><span class="line"><span class="string">          ,"rgb(119,195,79)"</span></span><br><span class="line"><span class="string">          ,"rgb(4,77,34)"</span></span><br><span class="line"><span class="string">          ,"rgb(122,2,60)"'</span></span><br><span class="line">  <span class="attr">star:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h2 id="Releases"><a href="#Releases" class="headerlink" title="Releases"></a>Releases</h2><p>V1.0</p><ul><li>fix the bugs</li><li>add comment system</li><li>add notice tips</li><li>add star sheme</li></ul><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>Apache License 2.0 Copyright(c) 2018-2020 <a href="https://github.com/dusign" target="_blank" rel="noopener">Dusign</a>   </p><p><a href="https://github.com/dusign/hexo-theme-snail" target="_blank" rel="noopener">hexo-theme-snail</a> is derived from <a href="https://github.com/Huxpro/huxpro.github.io" target="_blank" rel="noopener">Huxpro</a> Apache License 2.0. Copyright (c) 2015-2020 Huxpro</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo-theme-snail </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
